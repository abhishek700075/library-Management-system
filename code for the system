#include <iostream>
#include <vector>
#include <string>
#include <unordered_map> // For deadlines management

class Book {
private:
    std::string title;
    std::string author;
    int id;
    bool available;

public:
    Book(const std::string& title, const std::string& author, int id)
        : title(title), author(author), id(id), available(true) {}

    const std::string& getTitle() const {
        return title;
    }

    const std::string& getAuthor() const {
        return author;
    }

    int getId() const {
        return id;
    }

    bool isAvailable() const {
        return available;
    }

    void setAvailable(bool status) {
        available = status;
    }
};

class Library {
private:
    std::vector<Book> books;
    std::unordered_map<int, std::string> issuedBooks; // To store issued book details
    int totalAvailableBooks;

public:
    Library() : totalAvailableBooks(0) {}

    void addBook(const Book& book) {
        books.push_back(book);
        totalAvailableBooks++;
    }

    void displayBooks() const {
        std::cout << "Books in the library:\n";
        for (const auto& book : books) {
            std::cout << "Title: " << book.getTitle() << ", Author: " << book.getAuthor() << ", ID: " << book.getId();
            if (book.isAvailable()) {
                std::cout << " (Available)\n";
            } else {
                std::cout << " (Not Available)\n";
            }
        }
        std::cout << std::endl;
    }

    void borrowBook(int id, const std::string& username) {
        for (auto& book : books) {
            if (book.getId() == id && book.isAvailable()) {
                book.setAvailable(false);
                issuedBooks[id] = username; // Store issued book details
                totalAvailableBooks--;
                std::cout << "Book with ID " << id << " has been borrowed by " << username << ".\n";
                return;
            }
        }
        std::cout << "Book with ID " << id << " is either not available or doesn't exist.\n";
    }

    void returnBook(int id) {
        auto it = issuedBooks.find(id);
        if (it != issuedBooks.end()) {
            for (auto& book : books) {
                if (book.getId() == id && !book.isAvailable()) {
                    book.setAvailable(true);
                    totalAvailableBooks++;
                    issuedBooks.erase(it); // Remove book details from issued books
                    std::cout << "Book with ID " << id << " has been returned.\n";
                    return;
                }
            }
        } else {
            std::cout << "Book with ID " << id << " was not borrowed or doesn't exist.\n";
        }
    }

    int getTotalAvailableBooks() const {
        return totalAvailableBooks;
    }

    void displayIssuedBooks() const {
        std::cout << "Issued Books:\n";
        for (const auto& entry : issuedBooks) {
            std::cout << "Book ID: " << entry.first << ", Issued to: " << entry.second << std::endl;
        }
        std::cout << std::endl;
    }
};

class User {
private:
    std::string username;
    std::string password;

public:
    User(const std::string& username, const std::string& password)
        : username(username), password(password) {}

    const std::string& getUsername() const {
        return username;
    }

    const std::string& getPassword() const {
        return password;
    }
};

class UserManager {
private:
    std::vector<User> users;

public:
    void addUser(const User& user) {
        users.push_back(user);
    }

    bool userExists(const std::string& username) const {
        for (const auto& user : users) {
            if (user.getUsername() == username) {
                return true;
            }
        }
        return false;
    }

    bool verifyUser(const std::string& username, const std::string& password) const {
        for (const auto& user : users) {
            if (user.getUsername() == username && user.getPassword() == password) {
                return true;
            }
        }
        return false;
    }
};

int main() {
    Library library;
    UserManager userManager;

    // Adding some sample books to the library
    library.addBook(Book("The Great Gatsby", "F. Scott Fitzgerald", 101));
    library.addBook(Book("To Kill a Mockingbird", "Harper Lee", 102));
    library.addBook(Book("1984", "George Orwell", 103));

    // Adding sample users
    userManager.addUser(User("user1", "password1"));
    userManager.addUser(User("admin", "admin123"));

    int choice, bookId;
    std::string username, password;
    bool loggedIn = false;
    bool isAdmin = false;

    do {
        std::cout << "Library Management System\n";
        if (!loggedIn) {
            std::cout << "1. User Login\n";
            std::cout << "2. Admin Login\n";
            std::cout << "3. Exit\n";
            std::cout << "Enter your choice: ";
            std::cin >> choice;

            switch (choice) {
                case 1:
                    std::cout << "Enter username: ";
                    std::cin >> username;
                    std::cout << "Enter password: ";
                    std::cin >> password;
                    if (userManager.verifyUser(username, password)) {
                        loggedIn = true;
                        std::cout << "User login successful.\n";
                    } else {
                        std::cout << "Invalid username or password.\n";
                    }
                    break;
                case 2:
                    std::cout << "Enter admin username: ";
                    std::cin >> username;
                    std::cout << "Enter admin password: ";
                    std::cin >> password;
                    if (userManager.verifyUser(username, password) && username == "admin") {
                        loggedIn = true;
                        isAdmin = true;
                        std::cout << "Admin login successful.\n";
                    } else {
                        std::cout << "Invalid admin username or password.\n";
                    }
                    break;
                case 3:
                    std::cout << "Exiting... Thank you!\n";
                    return 0; // Exit the program
                default:
                    std::cout << "Invalid choice. Please enter a valid option.\n";
                    break;
            }
        } else {
            if (isAdmin) {
                std::cout << "Admin functionalities can be implemented here.\n";
                std::cout << "Displaying Available Books:\n";
                library.displayBooks();
                std::cout << "Displaying Issued Books:\n";
                library.displayIssuedBooks();
                std::cout << "Total Available Books: " << library.getTotalAvailableBooks() << std::endl;
            } else {
                std::cout << "User functionalities can be implemented here.\n";
                std::cout << "Displaying Available Books:\n";
                library.displayBooks();
                std::cout << "Enter the ID of the book you want to borrow: ";
                std::cin >> bookId;
                library.borrowBook(bookId, username); // Borrowing book with username
            }
            loggedIn = false; // Log out after functionalities are performed
        }
    } while (true); // Infinite loop, but exit points are set within switch cases

    return 0;
}
